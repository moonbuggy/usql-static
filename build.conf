APP_REPO='github.com/xo/usql'

SOURCE_REPO="golang"
SOURCE_VERSION="1.16"
SOURCE_ARCH_PREFIX="true"

# local output directory for built files
FILES_OUT="builds"

# s390x seems to lock up instead of building, can't be bothered figuring out why
EXCLUDED_ARCHES="s390x"

# <build_type> => <build_tags>
declare -A BUILD_TYPES_TAGS=( \
	[all]='all' \
	[base]='' \
	[most]='most' \
	[mypost]='no_oracle no_sqlite3 no_sqlserver mysql postgres' \
	[mysql]='no_oracle no_postgres no_sqlite3 no_sqlserver mysql' \
	[openxpki]='no_sqlserver mysql odbc oracle postgres sqlite3' \
	[postgres]='no_mysql no_oracle no_sqlite3 no_sqlserver postgres' \
	[sqlite3]='no_mysql no_oracle no_postgres no_sqlserver sqlite3' \
)

declare -A BUILD_ARCH_EXCLUDE_DRIVERS=( \
	[armv6]='netezza' \
	[armv7]='netezza' \
	[i386]='netezza' \
	[ppc64le]='moderncsqlite' \
)

declare -A BUILD_ARGS=( \
	[BUILD_OS]='build OS' \
	[APP_REPO]='usql repo' \
	[APP_VERSION]='usql version' \
	[APP_COMMIT_HASH]='usql hash' \
	[APP_BUILD_TAGS]='build tags' \
)

declare -A CHECKOUT_DISPLAY=( \
	[BUILD_OS]='build OS' \
	[SOURCE_TAG]='golang' \
	[APP_REPO]='usql repo' \
	[APP_VERSION]='usql version' \
	[APP_COMMIT_HASH]='usql hash' \
	[APP_BUILD_TYPE]='build type' \
	[APP_BUILD_TAGS]='build tags' \
)

get_source_tag () { echo "${SOURCE_VERSION}-alpine"; }

get_target_tag () { 
	[ -n "${APP_BUILD_TYPE}" ]  \
		&& echo "${APP_VERSION#v*}-${APP_BUILD_TYPE}" \
		|| echo "${APP_VERSION#v*}-unknown"
}

get_base_tags () {
	[ "${APP_VERSION}" = "${APP_LATEST}" ] && echo "latest-${APP_BUILD_TYPE}"
}

get_manifest_tags () {
	[ "${APP_VERSION}" = "${APP_LATEST}" ] && echo "latest-${APP_BUILD_TYPE}"
}

extra_build_args () {
	if [ -n "${BUILD_ARCH_EXCLUDE_DRIVERS[${arch}]}" ]; then
		echo "EXCLUDED_DRIVERS=Excluded drivers=$(printf 'no_%s\n' "${BUILD_ARCH_EXCLUDE_DRIVERS[${arch}]}")"
	fi
}

post_checkout_start () {
	[ -z "${APP_LATEST}" ] && add_param "$(git_latest_release "${APP_REPO#github\.com\/*}")" 'APP_LATEST'

	if [ -z "${APP_VERSION}" ]; then # determine the app version to install
		local app_tag_version
		app_tag_version="$(echo "${TARGET_TAG}" | grep -Eo '^[0-9\.]*')"
		[ -n "${app_tag_version}" ] \
			&& APP_VERSION="${app_tag_version}" \
			|| APP_VERSION="${APP_LATEST}"
	fi
	add_param "${APP_VERSION}" 'APP_VERSION'

	# get the commit hash for the relevant app version
	add_param "$(git_api_element "${APP_REPO}" "git/refs/tags/${APP_VERSION}" 'sha')" 'APP_COMMIT_HASH'

	# determine build tags for app
	# expect arguments in the form <version>-<build_type>-<build_os>-<arch>
	APP_BUILD_TYPE="$(echo "${DOCKER_TAG}" | cut -d'-' -f2)"

	APP_BUILD_TAGS="${BUILD_TYPES_TAGS[${APP_BUILD_TYPE}]}"
	[ -n "${APP_BUILD_TAGS}" ] \
		&& add_param "${APP_BUILD_TAGS}" 'APP_BUILD_TAGS' \
		|| APP_BUILD_TYPE='base'

	add_param "${APP_BUILD_TYPE}" 'APP_BUILD_TYPE'

	# get the latest golang source tag
	[ -z "${SOURCE_LATEST}" ] && add_param "$(git_latest_release "${SOURCE_REPO}")" 'SOURCE_LATEST'
}

post_build () {
	echo '--- post_build (from build.conf) ---'

	rm -rf _dummyfile "${IMPORTS_DIR}" "${QEMU_DIR}" > /dev/null 2>&1

	[ -z "${FILES_OUT}" ] \
		&& echo "No output directory defined." \
		&& return

	echo "Copying built files to: ${FILES_OUT}/"
	[ -d "${FILES_OUT}" ] || mkdir -p "${FILES_OUT}"

	for arch in ${build_arches}; do
		for key in ${available_keys}; do
			var="${arch}_${key}"
			declare "${key}=${!var}"
		done

		local image && image="${DOCKER_REPO}:${TARGET_TAG}-${TARGET_ARCH_TAG}"
		printf 'Copying: %s' "${image}"

		[ -n "${NOOP+set}" ] && printf '\t[NOOP]\n' && continue
		[ -n "${NO_BUILD+set}" ] && printf '\t[NO_BUILD]\n' && continue
		echo

		TEMP_OUT="$(mktemp -d)"

		docker save "${image}" | tar --wildcards -xf - -O -- */layer.tar | tar -ixf - --exclude='.arch' -C "${TEMP_OUT}/"
		tar -czf "${FILES_OUT}/usql${APP_VERSION#v*}-${APP_BUILD_TYPE}-${TARGET_ARCH_TAG}.tar.gz" -C "${TEMP_OUT}/" ./usql
		rm -rf "${TEMP_OUT}" >/dev/null 2>&1 || true
	done
}
